{
  
    
        "post0": {
            "title": "Advent of Code 2021 - Day 1",
            "content": "Advent of Code . I have, on every occasion that I have tried, completely failed to follow through on the Advent of Code. This is the year that I change that! . I like Python, so I&#39;m going to be presenting various solutions with Python as a way to play with it again. My goal is to explore the various approaches that one might take, and to think through things from a &quot;first principles&quot; kind of mindset. . So with that said, let&#39;s look at the first day! I&#39;m not going to copy over the text from the problems, but I will state them in my own words. . Part 1 . For the first part, we&#39;re given a list of numbers, and we are looking to determine how many of the numbers are larger than the one before. There&#39;s some story around it, and I appreciate the stories, but this is the gist. . The example is, if we&#39;re given: . 199 200 208 210 200 207 240 269 260 263 . then we would note that: . 199 (N/A - no previous measurement) 200 (increased) 208 (increased) 210 (increased) 200 (decreased) 207 (increased) 240 (increased) 269 (increased) 260 (decreased) 263 (increased) . Ok, so we need to get our input and preferably get it into numeric data types. I&#39;ll start out with a totally naive approach. . with open(&#39;../assets/inputs/aoc/2021/day_1.txt&#39;, &#39;r&#39;) as data_file: data = [int(point.strip()) for point in data_file.readlines()] . We strip the strings and then cast them to integer. This is a dandy way to get a list of values, but now we need to determine how they&#39;re bigger. We could do this in several ways, but the simplest is to iterate the list and make the comparison, storing a count of the values that are, in fact, larger than their predecessor. . count = 0 for i, n in enumerate(data): if n &gt; data[i - 1]: count += 1 print(count) . 1521 . Success! Your data is probably different, but this is the correct answer. We pass the list once, so the complexity here is O(n) on the input. Naively, we would expect that to be the limit for how good this could be. But what about the code itself? . Personally, I don&#39;t like to have state (count) just chilling and getting mutated. That&#39;s a recipe for mixups. . So let&#39;s look at what we&#39;re doing: applying a rule across an iterable and accumulating a result. That sounds an awful lot like a reduce. Trouble is, we don&#39;t really care about the accumulated value in the rule. We only care about the pairwise elements... . If we don&#39;t care about running through the list twice, then we can use a map in the form of a list comprehension to do this pretty effectively: . count = sum([int(n &gt; data[i - 1]) for i, n in enumerate(data)]) print(count) . 1521 . Personally, I like this better. Let&#39;s go ahead and make a function out of it for convenience though. . def count_increase_depths(data): return sum([int(n &gt; data[i - 1]) for i, n in enumerate(data)]) . Part 2 . So part two switches up the approach. We&#39;re going to use the same data, but instead of looking at a single value and it&#39;s predecessor, we want to create a sliding window of sums for sets of 3 values. This is pretty easy to achieve: . windows = [data[i:i + 3] for i in range(len(data))] display(windows[:10]) . [[173, 175, 171], [175, 171, 177], [171, 177, 179], [177, 179, 177], [179, 177, 174], [177, 174, 177], [174, 177, 178], [177, 178, 185], [178, 185, 189], [185, 189, 195]] . Looking at the first ten windows, it looks like we&#39;ve built them correctly, but it always pays to look at the front and the back of a data set. . display(windows[1990:]) . [[7063, 7065, 7066], [7065, 7066, 7071], [7066, 7071, 7079], [7071, 7079, 7092], [7079, 7092, 7102], [7092, 7102, 7118], [7102, 7118, 7115], [7118, 7115, 7121], [7115, 7121], [7121]] . Ah, trailing data from the windows. We can address that by altering the way we build them: . better_windows = [data[i:i + 3] for i in range(len(data) - 2)] display(better_windows[1990:]) . [[7063, 7065, 7066], [7065, 7066, 7071], [7066, 7071, 7079], [7071, 7079, 7092], [7079, 7092, 7102], [7092, 7102, 7118], [7102, 7118, 7115], [7118, 7115, 7121]] . Now, we could generalize this. The window distance itself is related to how many trailing values we end up with. If we defined the window as 4 instead of 3 we&#39;d have gotten 3 trailing values. This could be a helpful function in the future, so let&#39;s go ahead and write it: . def windowed(iterable, window_size): adjust = window_size - 1 windowing_range = range(len(iterable) - adjust) return [iterable[i:i + window_size] for i in windowing_range] display(windowed(data, 3)[1990:]) . [[7063, 7065, 7066], [7065, 7066, 7071], [7066, 7071, 7079], [7071, 7079, 7092], [7079, 7092, 7102], [7092, 7102, 7118], [7102, 7118, 7115], [7118, 7115, 7121]] . I like it! Now we basically need to run the same count algorithm on this, but after summing them. . windowed_data = windowed(data, 3) summed = [sum(window) for window in windowed_data] display(count_increase_depths(summed)) . 1543 . Conclusion . The first day wasn&#39;t a terribly difficult challenge, but it did get me thinking in Python again! I&#39;m really looking forward to doing the rest of the days this year. This should be a lot of fun. .",
            "url": "https://pcapel.github.io/thoughts-and-things/advent-of-code/2021/12/02/advent-of-code.html",
            "relUrl": "/advent-of-code/2021/12/02/advent-of-code.html",
            "date": " • Dec 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Advent of Code - Day 2",
            "content": "Day 2! . Technically, I wrote this the same day as day 1, and on the third day release... but you can forgive that, right? . Part 1 . Anyway, we&#39;re on to day 2! This challenge centers around calculating positions. So our input is a list of directions, and values to apply to those directions. First things first, we&#39;re going to want to split those up into something meaningful. Personally, I love a good namedtuple: . from collections import namedtuple Movement = namedtuple(&#39;Movement&#39;, [&#39;direction&#39;, &#39;value&#39;]) . So each instance in the input list can now be instantiated as a Movement, so let&#39;s read in that data! . with open(&#39;../assets/inputs/aoc/2021/day_2.txt&#39;, &#39;r&#39;) as data_file: lines = data_file.readlines() movements = [Movement(line.strip().split(&#39; &#39;)[0], int(line.strip().split(&#39; &#39;)[1])) for line in lines] display(movements[:3]) display(movements[997:]) . [Movement(direction=&#39;forward&#39;, value=4), Movement(direction=&#39;down&#39;, value=8), Movement(direction=&#39;down&#39;, value=3)] . [Movement(direction=&#39;forward&#39;, value=4), Movement(direction=&#39;forward&#39;, value=4), Movement(direction=&#39;forward&#39;, value=8)] . Ok! We have some data, and we&#39;ve got it formatted in a way that seems reasonable. Essentially, we need to calculate the horizontal and vertical position that the list of movements leaves us in. We will subtract from the vertical when we go up, add when we go down, and add to the horizontal when we move forward. This is a pretty easy set of conditions: . horizontal_position = 0 vertical_position = 0 for movement in movements: if movement.direction == &#39;up&#39;: vertical_position -= movement.value elif movement.direction == &#39;down&#39;: vertical_position += movement.value else: horizontal_position += movement.value display(horizontal_position * vertical_position) . 1648020 . Since the puzzle asks us to give the answer as the multiple of our tracked values, we do. . Success! . But, what about that code? Does it look... a little gross? I think it does. Namely, we&#39;re doing almost the exact same thing for every branch. Can we clean that up? . One approach that I like is to declare the operations in a dictionary: . import operator as ops movement_operation = { &#39;up&#39;: ops.sub, &#39;down&#39;: ops.add, &#39;forward&#39;: ops.add } . Now we can re-write a bit: . horizontal_position = 0 vertical_position = 0 for movement in movements: op = movement_operation[movement.direction] if movement.direction in [&#39;up&#39;, &#39;down&#39;]: vertical_position = op(vertical_position, movement.value) else: horizontal_position = op(horizontal_position, movement.value) display(horizontal_position * vertical_position) . 1648020 . Is this better? It&#39;s a little harder to read, and we have now encoded that vertical_position has to be the thing that both &#39;up&#39; and &#39;down&#39; deal with. If we were to need to change &#39;down&#39; to deal with some other value, this is harder to break apart. On the other hand, the operations are now lifted. If I need to change the operation that is performed for anything, I can do so in one place and be sure that it propogates to all the usage points. That&#39;s pretty cool. . Part 2 . Now we introduce the idea of &quot;aim&quot;. This is fun if you&#39;re a person who has played entirely too much Subnautica because the idea makes sense. In this story, you&#39;re piloting a sub-marine vehicle. So the aim is basically where the nose of the craft is pointed. Adjusting &#39;up&#39; and &#39;down&#39; now affects aim, and only forward changes the values. Pretty easy: . aim = 0 horizontal_position = 0 vertical_position = 0 for movement in movements: op = movement_operation[movement.direction] if movement.direction in [&#39;up&#39;, &#39;down&#39;]: aim = op(aim, movement.value) else: horizontal_position = op(horizontal_position, movement.value) vertical_position = op(vertical_position, (movement.value * aim)) display(horizontal_position * vertical_position) . 1759818555 . Ok, so we solved it, that&#39;s cool... But is this the best way? . We iterate the data (in its cleaned state) just the once. So that&#39;s good, but it still feels like we&#39;re missing something. It seems like the answer being the two values multiplied together means something. .",
            "url": "https://pcapel.github.io/thoughts-and-things/advent-of-code/2021/02/12/advent-of-code-2.html",
            "relUrl": "/advent-of-code/2021/02/12/advent-of-code-2.html",
            "date": " • Feb 12, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pcapel.github.io/thoughts-and-things/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pcapel.github.io/thoughts-and-things/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey! I’m Philip. I’m a guy who writes code and thinks about things. Sometimes it makes sense to write those thoughts down. Sometimes it doesn’t. For your sake, I hope that I have the foresight to know the difference, but I wouldn’t hold my breath. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pcapel.github.io/thoughts-and-things/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pcapel.github.io/thoughts-and-things/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}